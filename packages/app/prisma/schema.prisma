// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Server {
  resetDate String @id
}

model Faction {
  symbol             String         @id
  name               String?
  description        String?        @db.Text
  headquartersSymbol String?
  traits             FactionTrait[]
  color              String?

  @@index([headquartersSymbol])
}

model Agent {
  symbol             String    @id
  credits            Int
  headquartersSymbol String?
  headquarters       Waypoint? @relation("agentHeadquarters", fields: [headquartersSymbol], references: [symbol], onDelete: Cascade)
  accountId          String
  token              String?   @db.Text()
  automationStep     Int       @default(0)

  automationActions AutomationPlan[]
  shipGroups        ShipGroup[]

  @@index([headquartersSymbol])
}

model FactionTrait {
  symbol      String    @id
  name        String
  description String    @db.Text
  factions    Faction[]
}

model Sector {
  symbol  String   @id
  systems System[]
}

enum SystemType {
  NEUTRON_STAR
  RED_STAR
  ORANGE_STAR
  BLUE_STAR
  YOUNG_STAR
  WHITE_DWARF
  BLACK_HOLE
  HYPERGIANT
  NEBULA
  UNSTABLE
}

model Leaderboard {
  agentSymbol String
  reset       String
  dateTime    DateTime
  credits     Int
  ships       Int

  @@id([agentSymbol, reset, dateTime])
}

model System {
  symbol          String     @id
  sectorSymbol    String
  name            String?
  sector          Sector     @relation(fields: [sectorSymbol], references: [symbol], onDelete: Cascade)
  type            SystemType
  x               Float
  y               Float
  hasJumpGate     Boolean    @default(false)
  jumpgateRange   Int?
  hasMarket       Boolean    @default(false)
  hasFuel         Boolean    @default(false)
  hasShipyard     Boolean    @default(false)
  hasBelt         Boolean    @default(false)
  hasUncharted    Boolean    @default(false)
  hasStation      Boolean    @default(false)
  majorityFaction String?

  waypoints          Waypoint[]
  waypointsRetrieved Boolean    @default(false)
  shipsInSystem      Ship[]     @relation("currentSystem")

  @@index([sectorSymbol])
}

enum AutomationAction {
  EXPAND_GROUP
}

model AutomationPlan {
  id          String           @id @default(uuid())
  agent       Agent            @relation(fields: [agentSymbol], references: [symbol], onDelete: Cascade)
  agentSymbol String
  action      AutomationAction
  step        Int

  requiredCredits Int

  count Int?

  shipGroup       ShipGroup? @relation(fields: [shipGroupSymbol], references: [id], onDelete: SetNull)
  shipGroupSymbol String?

  @@index([agentSymbol])
}

model ShipGroup {
  id          String @id @default(uuid())
  name        String
  description String @db.Text
  agent       Agent  @relation(fields: [agentSymbol], references: [symbol], onDelete: Cascade)
  agentSymbol String

  shipConfiguration       ShipConfiguration? @relation(fields: [shipConfigurationSymbol], references: [symbol], onDelete: SetNull)
  shipConfigurationSymbol String?

  behavior ShipBehavior

  automationPlans AutomationPlan[]

  @@index([agentSymbol])
}

model ShipLog {
  id        String   @id @default(uuid())
  symbol    String
  message   String
  createdAt DateTime @default(now())

  @@index([symbol, createdAt])
}

model TradeLog {
  id                     String   @id @default(uuid())
  shipSymbol             String
  tradeGoodSymbol        String
  waypointSymbol         String
  purchaseWaypointSymbol String?
  sellWaypointSymbol     String?
  purchasePrice          Int?
  purchaseAmount         Int?
  purchasePriceAfter     Int?
  purchaseVolume         Int?
  sellPrice              Int?
  sellAmount             Int?
  sellPriceAfter         Int?
  sellVolume             Int?
  tradeVolume            Int
  fuelCost               Int?
  supply                 String
  supplyAfter            String
  createdAt              DateTime @default(now())
  parentTrade            String?

  @@index([shipSymbol, createdAt])
  @@index([tradeGoodSymbol, createdAt])
}

model TravelLog {
  id               String            @id @default(uuid())
  fromSystemSymbol String
  toSystemSymbol   String
  fromWaypoint     String
  toWaypoint       String
  shipSymbol       String
  method           String
  flightMode       ShipNavFlightMode
  engineSpeed      Int
  fuelConsumed     Int
  cooldown         Int
  flightDuration   Int
  distance         Int
  createdAt        DateTime          @default(now())

  @@index([shipSymbol, createdAt])
}

enum WaypointType {
  PLANET
  GAS_GIANT
  MOON
  ORBITAL_STATION
  JUMP_GATE
  ASTEROID_FIELD
  NEBULA
  DEBRIS_FIELD
  GRAVITY_WELL
}

model Waypoint {
  symbol        String          @id
  type          WaypointType
  systemSymbol  String
  system        System          @relation(fields: [systemSymbol], references: [symbol], onDelete: Cascade)
  x             Float
  y             Float
  factionSymbol String?
  traits        WaypointTrait[]

  orbitsSymbol String?
  orbits       Waypoint?  @relation("orbits", fields: [orbitsSymbol], references: [symbol], onDelete: NoAction, onUpdate: NoAction)
  orbitals     Waypoint[] @relation("orbits")

  chartSymbol      String?
  chartSubmittedBy String?
  chartSubmittedOn DateTime?

  shipsAtWaypoint Ship[] @relation("currentWaypoint")
  shipsEnroute    Ship[] @relation("destinationWaypoint")
  shipsDeparted   Ship[] @relation("departureWaypoint")

  agentsWithHeadquarters Agent[] @relation("agentHeadquarters")

  tradeGoods MarketPrice[]
  jumpgate   Jumpgate?

  @@index([orbitsSymbol])
  @@index([systemSymbol])
  @@index([factionSymbol])
}

model ShipConfiguration {
  symbol String @id

  name        String
  description String @db.Text

  frameSymbol   String
  reactorSymbol String
  engineSymbol  String

  shipConfigurationModule ShipConfigurationModule[]
  shipConfigurationMount  ShipConfigurationMount[]
  ShipyardModel           ShipyardModel[]
  ShipGroup               ShipGroup[]
}

model ShipConfigurationModule {
  id                      Int               @id @default(autoincrement())
  shipConfigurationSymbol String
  shipConfiguration       ShipConfiguration @relation(fields: [shipConfigurationSymbol], references: [symbol], onDelete: Cascade, onUpdate: Cascade)
  moduleSymbol            String

  @@index([shipConfigurationSymbol])
}

model ShipConfigurationMount {
  id                      Int               @id @default(autoincrement())
  shipConfigurationSymbol String
  shipConfiguration       ShipConfiguration @relation(fields: [shipConfigurationSymbol], references: [symbol], onDelete: Cascade, onUpdate: Cascade)
  mountSymbol             String

  @@index([shipConfigurationSymbol])
}

model ShipyardModel {
  shipConfigurationSymbol String
  shipConfiguration       ShipConfiguration? @relation(fields: [shipConfigurationSymbol], references: [symbol])
  waypointSymbol          String

  price Int?

  @@id([shipConfigurationSymbol, waypointSymbol])
  @@index([shipConfigurationSymbol])
}

model WaypointTrait {
  symbol      String     @id
  name        String
  description String     @db.Text
  waypoints   Waypoint[]
}

model Jumpgate {
  waypointSymbol String   @id
  waypoint       Waypoint @relation(fields: [waypointSymbol], references: [symbol])

  range Int

  validJumpTargets  JumpConnectedSystem[] @relation("fromSystem")
  incomingJumpsFrom JumpConnectedSystem[] @relation("toSystem")

  @@index([waypointSymbol])
}

model JumpConnectedSystem {
  fromWaypointSymbol String
  fromWaypoint       Jumpgate @relation("fromSystem", fields: [fromWaypointSymbol], references: [waypointSymbol])
  toWaypointSymbol   String
  toWaypoint         Jumpgate @relation("toSystem", fields: [toWaypointSymbol], references: [waypointSymbol])

  // x and y here are duplicate information, but don't want to join more
  x        Int
  y        Int
  distance Int

  @@id([fromWaypointSymbol, toWaypointSymbol])
  @@index([fromWaypointSymbol])
  @@index([toWaypointSymbol])
}

model JumpDistance {
  fromSystemSymbol String
  toSystemSymbol   String

  // x and y here are duplicate information, but don't want to join more
  jumps         Int
  totalDistance Int?

  @@id([fromSystemSymbol, toSystemSymbol])
}

enum ShipRole {
  FABRICATOR
  HARVESTER
  HAULER
  INTERCEPTOR
  EXCAVATOR
  TRANSPORT
  REPAIR
  SURVEYOR
  COMMAND
  CARRIER
  PATROL
  SATELLITE
  EXPLORER
  REFINERY
}

enum ShipNavStatus {
  IN_TRANSIT
  IN_ORBIT
  DOCKED
}

enum ShipNavFlightMode {
  DRIFT
  STEALTH
  CRUISE
  BURN
}

enum MarketGoodKind {
  IMPORT
  EXPORT
  EXCHANGE
}

model MarketPrice {
  waypointSymbol  String
  waypoint        Waypoint  @relation(fields: [waypointSymbol], references: [symbol], onDelete: Cascade)
  tradeGoodSymbol String
  tradeGood       TradeGood @relation(fields: [tradeGoodSymbol], references: [symbol], onDelete: Cascade)

  kind          MarketGoodKind
  supply        String
  purchasePrice Int
  sellPrice     Int
  tradeVolume   Int

  updatedOn DateTime @updatedAt

  @@id([waypointSymbol, tradeGoodSymbol])
  @@index([waypointSymbol])
  @@index([tradeGoodSymbol])
}

model TradeGood {
  symbol      String @id
  name        String
  description String @db.Text

  cargo      ShipCargo[]
  onMarketAt MarketPrice[]
}

model ShipCargo {
  shipSymbol      String
  ship            Ship      @relation(fields: [shipSymbol], references: [symbol], onDelete: Cascade)
  tradeGoodSymbol String
  tradeGood       TradeGood @relation(fields: [tradeGoodSymbol], references: [symbol], onDelete: Cascade)
  units           Int

  @@id([shipSymbol, tradeGoodSymbol])
  @@index([tradeGoodSymbol])
  @@index([shipSymbol])
}

model ShipFrame {
  symbol         String  @id
  name           String?
  description    String? @db.Text
  moduleSlots    Int?
  mountingPoints Int?
  fuelCapacity   Int?

  crewRequirement  Int?
  powerRequirement Int?

  ship Ship[]
}

model ShipReactor {
  symbol      String  @id
  name        String?
  description String? @db.Text

  powerOutput Int?

  crewRequirement Int?

  ships Ship[]
}

model ShipEngine {
  symbol      String  @id
  name        String?
  description String? @db.Text

  speed            Int?
  crewRequirement  Int?
  powerRequirement Int?

  ships Ship[]
}

model ShipModule {
  symbol      String @id
  name        String
  description String @db.Text

  effectName String?
  value      Int?

  crewRequirement  Int?
  powerRequirement Int?
  slotRequirement  Int?

  ships Ship[]
}

model ShipMount {
  symbol      String @id
  name        String
  description String @db.Text

  effectName String?
  value      Int?
  worksOn    String? @db.Text

  crewRequirement  Int?
  powerRequirement Int?
  slotRequirement  Int?

  ships Ship[]
}

enum ShipBehavior {
  TRADE
  UPDATE_MARKETS
  EXPLORE_MARKETS
  EXPLORE
  MAP_JUMPGATE
  MINE
  TRAVEL
}

model Ship {
  symbol        String   @id
  agent         String   @default("PHANTASM")
  name          String
  factionSymbol String
  role          ShipRole

  currentSystemSymbol   String
  currentSystem         System   @relation("currentSystem", fields: [currentSystemSymbol], references: [symbol], onDelete: Cascade)
  currentWaypointSymbol String
  currentWaypoint       Waypoint @relation("currentWaypoint", fields: [currentWaypointSymbol], references: [symbol], onDelete: Cascade)

  destinationWaypointSymbol String?
  destinationWaypoint       Waypoint? @relation("destinationWaypoint", fields: [destinationWaypointSymbol], references: [symbol], onDelete: Cascade)
  departureWaypointSymbol   String?
  departureWaypoint         Waypoint? @relation("departureWaypoint", fields: [departureWaypointSymbol], references: [symbol], onDelete: Cascade)
  departureOn               DateTime?
  arrivalOn                 DateTime?

  navStatus  ShipNavStatus
  flightMode ShipNavFlightMode

  reactorCooldownOn DateTime?

  fuelCapacity  Int @default(0)
  fuelAvailable Int @default(0)

  cargoCapacity Int?
  cargoUsed     Int?
  cargo         ShipCargo[]

  frame         ShipFrame   @relation(fields: [frameSymbol], references: [symbol], onDelete: Cascade)
  frameSymbol   String
  reactor       ShipReactor @relation(fields: [reactorSymbol], references: [symbol], onDelete: Cascade)
  reactorSymbol String
  engine        ShipEngine  @relation(fields: [engineSymbol], references: [symbol], onDelete: Cascade)
  engineSymbol  String

  currentBehavior        ShipBehavior?
  homeSystemSymbol       String?
  behaviorRange          Int?
  behaviorOnce           Boolean?
  travelGoalSystemSymbol String?
  overalGoal             String?

  updatedAt DateTime @default(now()) @updatedAt

  modules ShipModule[]
  mounts  ShipMount[]

  //    crew ShipCrew
  @@index([currentSystemSymbol])
  @@index([currentWaypointSymbol])
  @@index([destinationWaypointSymbol])
  @@index([departureWaypointSymbol])
  @@index([frameSymbol])
  @@index([reactorSymbol])
  @@index([engineSymbol])
}

enum ContractType {
  PROCUREMENT
}

model Contract {
  id                        String       @id
  agentSymbol               String
  factionSymbol             String
  type                      ContractType
  deadlineToAccept          DateTime
  paymentOnAccepted         Int
  paymentOnFulfilled        Int
  tradeGoodSymbol           String
  destinationWaypointSymbol String
  unitsRequired             Int
  unitsFulfilled            Int
  accepted                  Boolean
  fulfilled                 Boolean
  expiration                DateTime
}
