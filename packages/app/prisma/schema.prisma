// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Server {
  resetDate String @id
}

model Faction {
  symbol             String         @id
  name               String?
  description        String?        @db.Text
  headquartersSymbol String?
  traits             FactionTrait[]

  @@index([headquartersSymbol])
}

model Agent {
  symbol             String    @id
  credits            Int
  headquartersSymbol String?
  headquarters       Waypoint? @relation("agentHeadquarters", fields: [headquartersSymbol], references: [symbol], onDelete: Cascade)
  accountId          String

  @@index([headquartersSymbol])
}

model FactionTrait {
  symbol      String    @id
  name        String
  description String    @db.Text
  factions    Faction[]
}

model Sector {
  symbol  String   @id
  systems System[]
}

enum SystemType {
  NEUTRON_STAR
  RED_STAR
  ORANGE_STAR
  BLUE_STAR
  YOUNG_STAR
  WHITE_DWARF
  BLACK_HOLE
  HYPERGIANT
  NEBULA
  UNSTABLE
}

model System {
  symbol       String     @id
  sectorSymbol String
  name         String?
  sector       Sector     @relation(fields: [sectorSymbol], references: [symbol], onDelete: Cascade)
  type         SystemType
  x            Float
  y            Float

  waypoints          Waypoint[]
  waypointsRetrieved Boolean    @default(false)
  shipsInSystem      Ship[]     @relation("currentSystem")

  @@index([sectorSymbol])
}

enum WaypointType {
  PLANET
  GAS_GIANT
  MOON
  ORBITAL_STATION
  JUMP_GATE
  ASTEROID_FIELD
  NEBULA
  DEBRIS_FIELD
  GRAVITY_WELL
}

model Waypoint {
  symbol        String          @id
  type          WaypointType
  systemSymbol  String
  system        System          @relation(fields: [systemSymbol], references: [symbol], onDelete: Cascade)
  x             Float
  y             Float
  factionSymbol String?
  traits        WaypointTrait[]

  orbitsSymbol String?
  orbits       Waypoint?  @relation("orbits", fields: [orbitsSymbol], references: [symbol], onDelete: NoAction, onUpdate: NoAction)
  orbitals     Waypoint[] @relation("orbits")

  chartSymbol      String?
  chartSubmittedBy String?
  chartSubmittedOn DateTime?

  shipsAtWaypoint Ship[] @relation("currentWaypoint")
  shipsEnroute    Ship[] @relation("destinationWaypoint")
  shipsDeparted   Ship[] @relation("departureWaypoint")

  agentsWithHeadquarters Agent[] @relation("agentHeadquarters")

  tradeGoods MarketPrice[]

  @@index([orbitsSymbol])
  @@index([systemSymbol])
  @@index([factionSymbol])
}

model WaypointTrait {
  symbol      String     @id
  name        String
  description String     @db.Text
  waypoints   Waypoint[]
}

enum ShipRole {
  FABRICATOR
  HARVESTER
  HAULER
  INTERCEPTOR
  EXCAVATOR
  TRANSPORT
  REPAIR
  SURVEYOR
  COMMAND
  CARRIER
  PATROL
  SATELLITE
  EXPLORER
  REFINERY
}

enum ShipNavStatus {
  IN_TRANSIT
  IN_ORBIT
  DOCKED
}

enum ShipNavFlightMode {
  DRIFT
  STEALTH
  CRUISE
  BURN
}

enum MarketGoodKind {
  IMPORT
  EXPORT
  EXCHANGE
}

model MarketPrice {
  waypointSymbol  String
  waypoint        Waypoint  @relation(fields: [waypointSymbol], references: [symbol], onDelete: Cascade)
  tradeGoodSymbol String
  tradeGood       TradeGood @relation(fields: [tradeGoodSymbol], references: [symbol], onDelete: Cascade)

  kind          MarketGoodKind
  supply        String
  purchasePrice Int
  sellPrice     Int
  tradeVolume   Int

  updatedOn DateTime @updatedAt

  @@id([waypointSymbol, tradeGoodSymbol])
  @@index([waypointSymbol])
  @@index([tradeGoodSymbol])
}

model TradeGood {
  symbol      String @id
  name        String
  description String @db.Text

  cargo      ShipCargo[]
  onMarketAt MarketPrice[]
}

model ShipCargo {
  shipSymbol      String
  ship            Ship      @relation(fields: [shipSymbol], references: [symbol], onDelete: Cascade)
  tradeGoodSymbol String
  tradeGood       TradeGood @relation(fields: [tradeGoodSymbol], references: [symbol], onDelete: Cascade)
  units           Int

  @@id([shipSymbol, tradeGoodSymbol])
  @@index([tradeGoodSymbol])
  @@index([shipSymbol])
}

model ShipFrame {
  symbol         String  @id
  name           String?
  description    String? @db.Text
  moduleSlots    Int?
  mountingPoints Int?
  fuelCapacity   Int?

  crewRequirement  Int?
  powerRequirement Int?

  ship Ship[]
}

model ShipReactor {
  symbol      String  @id
  name        String?
  description String? @db.Text

  powerOutput Int?

  crewRequirement Int?

  ships Ship[]
}

model ShipEngine {
  symbol      String  @id
  name        String?
  description String? @db.Text

  speed            Int?
  crewRequirement  Int?
  powerRequirement Int?

  ships Ship[]
}

model ShipModule {
  symbol      String @id
  name        String
  description String @db.Text

  effectName String?
  value      Int?

  crewRequirement  Int?
  powerRequirement Int?
  slotRequirement  Int?

  ships Ship[]
}

model ShipMount {
  symbol      String @id
  name        String
  description String @db.Text

  effectName String?
  value      Int?
  worksOn    String? @db.Text

  crewRequirement  Int?
  powerRequirement Int?
  slotRequirement  Int?

  ships Ship[]
}

model Ship {
  symbol        String   @id
  agent         String   @default("PHANTASM")
  name          String
  factionSymbol String
  role          ShipRole

  currentSystemSymbol   String
  currentSystem         System   @relation("currentSystem", fields: [currentSystemSymbol], references: [symbol], onDelete: Cascade)
  currentWaypointSymbol String
  currentWaypoint       Waypoint @relation("currentWaypoint", fields: [currentWaypointSymbol], references: [symbol], onDelete: Cascade)

  destinationWaypointSymbol String?
  destinationWaypoint       Waypoint? @relation("destinationWaypoint", fields: [destinationWaypointSymbol], references: [symbol], onDelete: Cascade)
  departureWaypointSymbol   String?
  departureWaypoint         Waypoint? @relation("departureWaypoint", fields: [departureWaypointSymbol], references: [symbol], onDelete: Cascade)
  departureOn               DateTime?
  arrivalOn                 DateTime?

  navStatus  ShipNavStatus
  flightMode ShipNavFlightMode

  reactorCooldownOn DateTime?

  fuelCapacity  Int @default(0)
  fuelAvailable Int @default(0)

  cargoCapacity Int?
  cargoUsed     Int?
  cargo         ShipCargo[]

  frame         ShipFrame   @relation(fields: [frameSymbol], references: [symbol], onDelete: Cascade)
  frameSymbol   String
  reactor       ShipReactor @relation(fields: [reactorSymbol], references: [symbol], onDelete: Cascade)
  reactorSymbol String
  engine        ShipEngine  @relation(fields: [engineSymbol], references: [symbol], onDelete: Cascade)
  engineSymbol  String

  updatedAt DateTime @default(now()) @updatedAt

  modules ShipModule[]
  mounts  ShipMount[]

  //    crew ShipCrew
  @@index([currentSystemSymbol])
  @@index([currentWaypointSymbol])
  @@index([destinationWaypointSymbol])
  @@index([departureWaypointSymbol])
  @@index([frameSymbol])
  @@index([reactorSymbol])
  @@index([engineSymbol])
}
