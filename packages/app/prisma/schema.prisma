// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Server {
  id        String @id @default(uuid())
  apiUrl    String @unique
  resetDate String
}

model Faction {
  symbol             String         @id
  name               String?
  description        String?        @db.Text
  headquartersSymbol String?
  traits             FactionTrait[]
  color              String?

  @@index([headquartersSymbol])
}

model Agent {
  id                 String  @id @default(uuid())
  symbol             String
  reset              String
  credits            Int
  headquartersSymbol String?
  accountId          String
  token              String? @db.Text()

  automationStep Int @default(0)

  automationActions AutomationPlan[]
  shipGroups        ShipGroup[]

  primaryAgentAccounts Account[] @relation(name: "currentAgent")
  Account              Account   @relation(name: "allAgents", fields: [accountId], references: [id])

  @@unique([symbol, reset])
}

model Account {
  id       String @id @default(uuid())
  email    String @unique
  password String

  currentAgent   Agent?  @relation(name: "currentAgent", fields: [currentAgentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  currentAgentId String?

  agents Agent[] @relation(name: "allAgents")

  @@index([currentAgentId])
}

model FactionTrait {
  symbol      String    @id
  name        String
  description String    @db.Text
  factions    Faction[]
}

model Sector {
  symbol  String   @id
  systems System[]
}

enum SystemType {
  NEUTRON_STAR
  RED_STAR
  ORANGE_STAR
  BLUE_STAR
  YOUNG_STAR
  WHITE_DWARF
  BLACK_HOLE
  HYPERGIANT
  NEBULA
  UNSTABLE
}

model Leaderboard {
  agentSymbol String
  reset       String
  dateTime    DateTime
  credits     Int
  ships       Int

  @@id([agentSymbol, reset, dateTime])
}

enum ExploreStatus {
  UNEXPLORED
  EXPLORING
  EXPLORED
}

model System {
  symbol          String     @id
  sectorSymbol    String
  name            String?
  sector          Sector     @relation(fields: [sectorSymbol], references: [symbol], onDelete: Cascade)
  type            SystemType
  x               Float
  y               Float
  hasJumpGate     Boolean    @default(false)
  jumpgateRange   Int?
  hasMarket       Boolean    @default(false)
  hasFuel         Boolean    @default(false)
  hasShipyard     Boolean    @default(false)
  hasBelt         Boolean    @default(false)
  hasUncharted    Boolean    @default(false)
  hasStation      Boolean    @default(false)
  majorityFaction String?

  exploreStatus      ExploreStatus?      @default(UNEXPLORED)
  exploredAt         DateTime?
  waypoints          Waypoint[]
  waypointsRetrieved Boolean             @default(false)
  shipsInSystem      Ship[]              @relation("currentSystem")
  ConsolidatedPrice  ConsolidatedPrice[]

  @@index([sectorSymbol])
}

enum AutomationAction {
  EXPAND_GROUP
}

model AutomationPlan {
  id          String           @id @default(uuid())
  agent       Agent            @relation(fields: [agentSymbol], references: [id], onDelete: Cascade)
  agentSymbol String
  action      AutomationAction
  step        Int

  requiredCredits Int

  count Int?

  shipGroup       ShipGroup? @relation(fields: [shipGroupSymbol], references: [id], onDelete: SetNull)
  shipGroupSymbol String?

  @@index([agentSymbol])
  @@index([shipGroupSymbol])
}

model ShipGroup {
  id          String @id @default(uuid())
  name        String
  description String @db.Text
  agent       Agent  @relation(fields: [agentSymbol], references: [id], onDelete: Cascade)
  agentSymbol String

  shipConfiguration       ShipConfiguration? @relation(fields: [shipConfigurationSymbol], references: [symbol], onDelete: SetNull)
  shipConfigurationSymbol String?

  behavior ShipBehavior

  automationPlans AutomationPlan[]

  @@index([agentSymbol])
  @@index([shipConfigurationSymbol])
}

enum LogLevel {
  INFO
  WARN
  ERROR
}

model ShipLog {
  id        String   @id @default(uuid())
  symbol    String
  message   String
  level     LogLevel @default(INFO)
  createdAt DateTime @default(now())

  @@index([symbol, createdAt])
}

model Ledger {
  id                   String               @id @default(uuid())
  shipSymbol           String
  tradeGoodSymbol      String
  waypointSymbol       String
  transactionType      MarketTransationType
  pricePerUnit         Int
  totalPrice           Int
  units                Int
  tradeVolume          Int?
  supply               String?
  activityLevel        String?
  credits              Int                  @default(0)
  objectiveExecution   ObjectiveExecution?  @relation(fields: [objectiveExecutionId], references: [id], onDelete: SetNull)
  objectiveExecutionId String?
  createdAt            DateTime             @default(now())

  @@index([shipSymbol, createdAt])
  @@index([tradeGoodSymbol, createdAt])
}

model TravelLog {
  id               String            @id @default(uuid())
  fromSystemSymbol String
  toSystemSymbol   String
  fromWaypoint     String
  toWaypoint       String
  shipSymbol       String
  method           String
  flightMode       ShipNavFlightMode
  engineSpeed      Int
  fuelConsumed     Int
  cooldown         Int
  flightDuration   Int
  distance         Int
  createdAt        DateTime          @default(now())

  @@index([shipSymbol, createdAt])
}

enum WaypointType {
  PLANET
  GAS_GIANT
  MOON
  ORBITAL_STATION
  JUMP_GATE
  ASTEROID_FIELD
  ASTEROID
  ENGINEERED_ASTEROID
  ASTEROID_BASE
  NEBULA
  DEBRIS_FIELD
  GRAVITY_WELL
  ARTIFICIAL_GRAVITY_WELL
  FUEL_STATION
}

model Waypoint {
  symbol              String             @id
  type                WaypointType
  systemSymbol        String
  system              System             @relation(fields: [systemSymbol], references: [symbol], onDelete: Cascade)
  x                   Float
  y                   Float
  isUnderConstruction Boolean            @default(false)
  factionSymbol       String?
  exploreStatus       ExploreStatus?     @default(UNEXPLORED)
  traits              WaypointTrait[]
  modifiers           WaypointModifier[]
  marketLastUpdated   DateTime           @default(now())

  orbitsSymbol String?
  orbits       Waypoint?  @relation("orbits", fields: [orbitsSymbol], references: [symbol], onDelete: NoAction, onUpdate: NoAction)
  orbitals     Waypoint[] @relation("orbits")

  chartSymbol      String?
  chartSubmittedBy String?
  chartSubmittedOn DateTime?

  shipsAtWaypoint Ship[] @relation("currentWaypoint")
  shipsEnroute    Ship[] @relation("destinationWaypoint")
  shipsDeparted   Ship[] @relation("departureWaypoint")

  tradeGoods         MarketPrice[]
  jumpConnectedTo    Waypoint[]           @relation("jumpConnectedTo")
  jumpConnectedFrom  Waypoint[]           @relation("jumpConnectedTo")
  construction       Construction?
  purchasableShips   ShipyardModel[]
  MarketPriceHistory MarketPriceHistory[]
  Survey             Survey[]

  @@index([orbitsSymbol])
  @@index([systemSymbol])
  @@index([factionSymbol])
}

model Construction {
  symbol      String   @id
  waypoint    Waypoint @relation(fields: [symbol], references: [symbol], onDelete: Cascade)
  isCompleted Boolean  @default(false)

  materials Material[]
}

model Material {
  id              Int          @id @default(autoincrement())
  constructionId  String
  construction    Construction @relation(fields: [constructionId], references: [symbol], onDelete: Cascade)
  tradeGoodSymbol String
  tradeGood       TradeGood    @relation(fields: [tradeGoodSymbol], references: [symbol], onDelete: Cascade)
  required        Int
  fulfilled       Int

  @@unique([constructionId, tradeGoodSymbol])
  @@index([constructionId])
  @@index([tradeGoodSymbol])
}

model ShipConfiguration {
  symbol String @id

  name        String
  description String @db.Text

  frameSymbol   String
  frame         ShipFrame   @relation(fields: [frameSymbol], references: [symbol], onDelete: Cascade)
  reactorSymbol String
  reactor       ShipReactor @relation(fields: [reactorSymbol], references: [symbol], onDelete: Cascade)
  engineSymbol  String
  engine        ShipEngine  @relation(fields: [engineSymbol], references: [symbol], onDelete: Cascade)

  shipConfigurationModule ShipConfigurationModule[]
  shipConfigurationMount  ShipConfigurationMount[]
  ShipyardModel           ShipyardModel[]
  ShipGroup               ShipGroup[]
}

model ShipConfigurationModule {
  id                      Int               @id @default(autoincrement())
  shipConfigurationSymbol String
  shipConfiguration       ShipConfiguration @relation(fields: [shipConfigurationSymbol], references: [symbol], onDelete: Cascade, onUpdate: Cascade)
  moduleSymbol            String
  module                  ShipModule        @relation(fields: [moduleSymbol], references: [symbol], onDelete: Cascade, onUpdate: Cascade)

  @@index([shipConfigurationSymbol])
}

model ShipConfigurationMount {
  id                      Int               @id @default(autoincrement())
  shipConfigurationSymbol String
  shipConfiguration       ShipConfiguration @relation(fields: [shipConfigurationSymbol], references: [symbol], onDelete: Cascade, onUpdate: Cascade)
  mountSymbol             String
  mount                   ShipMount         @relation(fields: [mountSymbol], references: [symbol], onDelete: Cascade, onUpdate: Cascade)

  @@index([shipConfigurationSymbol])
}

model ShipyardModel {
  shipConfigurationSymbol String
  shipConfiguration       ShipConfiguration? @relation(fields: [shipConfigurationSymbol], references: [symbol])
  waypointSymbol          String
  waypoint                Waypoint           @relation(fields: [waypointSymbol], references: [symbol])

  price Int?

  @@id([shipConfigurationSymbol, waypointSymbol])
  @@index([shipConfigurationSymbol])
}

model WaypointTrait {
  symbol      String     @id
  name        String
  description String     @db.Text
  waypoints   Waypoint[]
}

model Survey {
  id             String   @id @default(uuid())
  waypoint       Waypoint @relation(fields: [waypointSymbol], references: [symbol], onDelete: Cascade)
  waypointSymbol String
  signature      String
  payload        String   @db.Text
  value          Float
  expiration     DateTime @default(now())
  createdAt      DateTime @default(now())

  @@unique([signature])
  @@index([waypointSymbol])
}

model WaypointModifier {
  symbol      String     @id
  name        String
  description String     @db.Text
  waypoints   Waypoint[]
}

model JumpDistance {
  fromSystemSymbol String
  toSystemSymbol   String

  // x and y here are duplicate information, but don't want to join more
  jumps         Int
  totalDistance Int?

  @@id([fromSystemSymbol, toSystemSymbol])
}

enum ShipRole {
  FABRICATOR
  HARVESTER
  HAULER
  INTERCEPTOR
  EXCAVATOR
  TRANSPORT
  REPAIR
  SURVEYOR
  COMMAND
  CARRIER
  PATROL
  SATELLITE
  EXPLORER
  REFINERY
}

enum ShipNavStatus {
  IN_TRANSIT
  IN_ORBIT
  DOCKED
}

enum ShipNavFlightMode {
  DRIFT
  STEALTH
  CRUISE
  BURN
}

enum MarketGoodKind {
  IMPORT
  EXPORT
  EXCHANGE
}

enum MarketGoodSupply {
  ABUNDANT
  HIGH
  MODERATE
  LIMITED
  SCARCE
}

enum MarketGoodActivityLevel {
  STRONG
  GROWING
  WEAK
  RESTRICTED
}

model MarketPrice {
  waypointSymbol  String
  waypoint        Waypoint  @relation(fields: [waypointSymbol], references: [symbol], onDelete: Cascade)
  tradeGoodSymbol String
  tradeGood       TradeGood @relation(fields: [tradeGoodSymbol], references: [symbol], onDelete: Cascade)

  kind          MarketGoodKind
  supply        MarketGoodSupply?
  activityLevel MarketGoodActivityLevel?
  purchasePrice Int?
  sellPrice     Int?
  tradeVolume   Int?

  updatedOn DateTime @updatedAt

  @@id([waypointSymbol, tradeGoodSymbol])
  @@index([waypointSymbol])
  @@index([tradeGoodSymbol])
}

model ConsolidatedPrice {
  tradeGoodSymbol String    @id
  tradeGood       TradeGood @relation(fields: [tradeGoodSymbol], references: [symbol], onDelete: Cascade)

  systemSymbol String?
  system       System? @relation(fields: [systemSymbol], references: [symbol], onDelete: Cascade)

  purchaseMaxPrice    Int?
  purchaseMinPrice    Int?
  purchaseAvgPrice    Int?
  purchaseMedianPrice Int?
  purchaseStdDev      Int?
  purchaseP95         Int?
  purchaseP5          Int?
  sellMaxPrice        Int?
  sellMinPrice        Int?
  sellAvgPrice        Int?
  sellMedianPrice     Int?
  sellStdDev          Int?
  sellP95             Int?
  sellP5              Int?
  maxVolume           Int?
  minVolume           Int?
  importMarketCount   Int?
  exportMarketCount   Int?
  exchangeMarketCount Int?
}

model MarketPriceHistory {
  waypointSymbol  String
  waypoint        Waypoint  @relation(fields: [waypointSymbol], references: [symbol], onDelete: Cascade)
  tradeGoodSymbol String
  tradeGood       TradeGood @relation(fields: [tradeGoodSymbol], references: [symbol], onDelete: Cascade)
  createdAt       DateTime  @default(now())

  kind          MarketGoodKind
  supply        MarketGoodSupply?
  activityLevel MarketGoodActivityLevel?
  purchasePrice Int?
  sellPrice     Int?
  tradeVolume   Int?

  updatedOn DateTime @updatedAt

  @@id([waypointSymbol, tradeGoodSymbol, createdAt])
  @@index([waypointSymbol])
  @@index([tradeGoodSymbol])
}

enum MarketTransationType {
  PURCHASE
  SELL
}

model MarketTransaction {
  id                   String               @id @default(uuid())
  waypointSymbol       String
  shipSymbol           String
  tradeSymbol          String
  type                 MarketTransationType
  units                Int
  pricePerUnit         Int
  totalPrice           Int
  timestamp            DateTime             @default(now())
  ObjectiveExecution   ObjectiveExecution?  @relation(fields: [objectiveExecutionId], references: [id])
  objectiveExecutionId String?

  @@unique([waypointSymbol, shipSymbol, tradeSymbol, timestamp])
}

model TradeGood {
  symbol      String @id
  name        String
  description String @db.Text

  cargo              ShipCargo[]
  onMarketAt         MarketPrice[]
  Material           Material[]
  MarketPriceHistory MarketPriceHistory[]
  ConsolidatedPrice  ConsolidatedPrice[]
}

model ShipCargo {
  shipSymbol      String
  ship            Ship      @relation(fields: [shipSymbol], references: [symbol], onDelete: Cascade)
  tradeGoodSymbol String
  tradeGood       TradeGood @relation(fields: [tradeGoodSymbol], references: [symbol], onDelete: Cascade)
  units           Int

  @@id([shipSymbol, tradeGoodSymbol])
  @@index([tradeGoodSymbol])
  @@index([shipSymbol])
}

model ShipFrame {
  symbol         String  @id
  name           String?
  description    String? @db.Text
  moduleSlots    Int?
  mountingPoints Int?
  fuelCapacity   Int?

  crewRequirement  Int?
  powerRequirement Int?

  ship              Ship[]
  ShipConfiguration ShipConfiguration[]
}

model ShipReactor {
  symbol      String  @id
  name        String?
  description String? @db.Text

  powerOutput Int?

  crewRequirement Int?

  ships             Ship[]
  ShipConfiguration ShipConfiguration[]
}

model ShipEngine {
  symbol      String  @id
  name        String?
  description String? @db.Text

  speed            Int?
  crewRequirement  Int?
  powerRequirement Int?

  ships             Ship[]
  ShipConfiguration ShipConfiguration[]
}

model ShipModule {
  symbol      String  @id
  name        String?
  description String? @db.Text

  effectName String?
  value      Int?

  crewRequirement  Int?
  powerRequirement Int?
  slotRequirement  Int?

  ships                   Ship[]
  ShipConfigurationModule ShipConfigurationModule[]
}

model ShipMount {
  symbol      String  @id
  name        String?
  description String? @db.Text

  effectName String?
  value      Int?
  worksOn    String? @db.Text

  crewRequirement  Int?
  powerRequirement Int?
  slotRequirement  Int?

  ships                  Ship[]
  ShipConfigurationMount ShipConfigurationMount[]
}

enum ShipBehavior {
  TRADE
  UPDATE_MARKETS
  EXPLORE_MARKETS
  EXPLORE
  MAP_JUMPGATE
  MINE
  TRAVEL
}

enum CargoState {
  OPEN_PICKUP
  MANAGED
}

enum ShipState {
  ORCHESTRATED
  STUCK
}

model Ship {
  symbol        String     @id
  callsign      String     @default("")
  agent         String     @default("PHANTASM")
  name          String
  factionSymbol String
  role          ShipRole
  cargoState    CargoState @default(MANAGED)
  state         ShipState  @default(STUCK)

  currentSystemSymbol   String
  currentSystem         System   @relation("currentSystem", fields: [currentSystemSymbol], references: [symbol], onDelete: Cascade)
  currentWaypointSymbol String
  currentWaypoint       Waypoint @relation("currentWaypoint", fields: [currentWaypointSymbol], references: [symbol], onDelete: Cascade)

  destinationWaypointSymbol String?
  destinationWaypoint       Waypoint? @relation("destinationWaypoint", fields: [destinationWaypointSymbol], references: [symbol], onDelete: Cascade)
  departureWaypointSymbol   String?
  departureWaypoint         Waypoint? @relation("departureWaypoint", fields: [departureWaypointSymbol], references: [symbol], onDelete: Cascade)
  departureOn               DateTime?
  arrivalOn                 DateTime?

  navStatus  ShipNavStatus
  flightMode ShipNavFlightMode

  reactorCooldownOn DateTime?

  fuelCapacity  Int @default(0)
  fuelAvailable Int @default(0)

  cargoCapacity Int?
  cargoUsed     Int?
  cargo         ShipCargo[]

  frame         ShipFrame   @relation(fields: [frameSymbol], references: [symbol], onDelete: Cascade)
  frameSymbol   String
  reactor       ShipReactor @relation(fields: [reactorSymbol], references: [symbol], onDelete: Cascade)
  reactorSymbol String
  engine        ShipEngine  @relation(fields: [engineSymbol], references: [symbol], onDelete: Cascade)
  engineSymbol  String

  // this gets set with an id that uniquely identifies a given objective execution
  objectiveExecutionId     String?
  objectiveExecution       ObjectiveExecution? @relation(fields: [objectiveExecutionId], references: [id], onDelete: SetNull)
  objective                String?
  nextObjectiveExecutionId String?
  nextObjectiveExecution   ObjectiveExecution? @relation("next", fields: [nextObjectiveExecutionId], references: [id], onDelete: SetNull)
  nextObjective            String?

  updatedAt            DateTime  @default(now()) @updatedAt
  taskStartedOn        DateTime?
  expectedTaskDuration Int?

  modules             ShipModule[]
  mounts              ShipMount[]
  shipTasks           ShipTask[]
  objectiveExecutions ObjectiveExecution[] @relation("executions")

  //    crew ShipCrew
  @@index([currentSystemSymbol])
  @@index([currentWaypointSymbol])
  @@index([destinationWaypointSymbol])
  @@index([departureWaypointSymbol])
  @@index([frameSymbol])
  @@index([reactorSymbol])
  @@index([engineSymbol])
}

enum ObjectiveExecutionState {
  SCHEDULED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

model ObjectiveExecution {
  id                      String                  @id @default(uuid())
  state                   ObjectiveExecutionState
  name                    String
  type                    String
  data                    String?                 @db.Text()
  creditDelta             Int?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @default(now()) @updatedAt
  creditsReserved         Int                     @default(0)
  completedAt             DateTime?
  marketTransactions      MarketTransaction[]
  currentlyAssignedTo     Ship[]
  currentlyNextAssignedTo Ship[]                  @relation("next")
  ship                    Ship?                   @relation("executions", fields: [shipSymbol], references: [symbol])
  shipSymbol              String?
  ledger                  Ledger[]
}

enum TaskType {
  TRAVEL
  EXPLORE
  PURCHASE
  SELL
  CONSTRUCT
  UPDATE_MARKET
  SIPHON
  MINE
  SURVEY
  PURCHASE_SHIP
  PICKUP_CARGO
  OFFLOAD_INVENTORY
}

model ShipTask {
  id         String   @id @default(uuid())
  shipSymbol String
  ship       Ship     @relation(fields: [shipSymbol], references: [symbol], onDelete: Cascade)
  type       TaskType
  data       String   @db.Text()
  createdAt  DateTime @default(now())
}

enum ContractType {
  PROCUREMENT
}

model Contract {
  id                        String       @id
  agentSymbol               String
  factionSymbol             String
  type                      ContractType
  deadlineToAccept          DateTime
  paymentOnAccepted         Int
  paymentOnFulfilled        Int
  tradeGoodSymbol           String
  destinationWaypointSymbol String
  unitsRequired             Int
  unitsFulfilled            Int
  accepted                  Boolean
  fulfilled                 Boolean
  expiration                DateTime
}
